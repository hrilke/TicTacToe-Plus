@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 6,
    "backwardDepth": 6,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "Controller.GameController",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_1567201562 { 
   	label=BotPlayingStrategy
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   BotPlayingStrategyFactory319565549[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)BotPlayingStrategyFactory</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ getBotPlayingStrategy(level: BotDifficultyLevel): BotPlayingStrategy</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

EasyBotPlayingStrategy319565549[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)EasyBotPlayingStrategy</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ makeMove(board: Board, jarvis: Player): Move</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

HardBotPlayingStrategy319565549[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)HardBotPlayingStrategy</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- checkColHashMap(col: int, board: Board)</TD></TR>
<TR><TD ALIGN="LEFT" >- checkFirstMove(board: Board): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- checkRowHashMap(row: int, board: Board)</TD></TR>
<TR><TD ALIGN="LEFT" >- cornerMove(board: Board)</TD></TR>
<TR><TD ALIGN="LEFT" >- getFirstMove(board: Board): Cell</TD></TR>
<TR><TD ALIGN="LEFT" >- initializeHashMaps(dimension: int)</TD></TR>
<TR><TD ALIGN="LEFT" >- isMoveInCorners(row: int, col: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- isMoveOnLeftDiagonal(row: int, col: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- isMoveOnRightDiagonal(row: int, col: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- leftDiagonalMove(board: Board)</TD></TR>
<TR><TD ALIGN="LEFT" >+ makeMove(board: Board, jarvis: Player): Move</TD></TR>
<TR><TD ALIGN="LEFT" >- rightDiagonalMove(board: Board)</TD></TR>
<TR><TD ALIGN="LEFT" >- updateCheckHashMap(board: Board)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

MediumBotPlayingStrategy319565549[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)MediumBotPlayingStrategy</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ makeMove(board: Board, jarvis: Player): Move</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_1664073796 { 
   	label=Controller
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   GameController1664073796[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)GameController</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ checkWinner(game: Game, lastPlayedMove: Move): Player</TD></TR>
<TR><TD ALIGN="LEFT" >+ createGame(dimension: int, players: List&lt;Player&gt;, name: WinningStrategyName): Game</TD></TR>
<TR><TD ALIGN="LEFT" >+ displayBoard(game: Game)</TD></TR>
<TR><TD ALIGN="LEFT" >+ executeMove(game: Game, player: Player): Move</TD></TR>
<TR><TD ALIGN="LEFT" >+ getGameStatus(game: Game): GameStatus</TD></TR>
<TR><TD ALIGN="LEFT" >+ replayGame(game: Game, winner: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ saveBoard(game: Game)</TD></TR>
<TR><TD ALIGN="LEFT" >+ undoMove(game: Game, played: Move)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_2211858 { 
   	label=Game
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Builder243045417[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Builder</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   currentBoard: Board [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   dimension: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   players: List&lt;Player&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   winningStrategy: WinningStrategy [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ build(): Game</TD></TR>
<TR><TD ALIGN="LEFT" >+ setCurrentBoard(currentBoard: Board): Builder</TD></TR>
<TR><TD ALIGN="LEFT" >+ setDimension(dimension: int): Builder</TD></TR>
<TR><TD ALIGN="LEFT" >+ setPlayers(players: List&lt;Player&gt;): Builder</TD></TR>
<TR><TD ALIGN="LEFT" >+ setWinningStrategy(winningStrategy: WinningStrategy): Builder</TD></TR>
<TR><TD ALIGN="LEFT" >- validate()</TD></TR>
<TR><TD ALIGN="LEFT" >- validateBotCount()</TD></TR>
<TR><TD ALIGN="LEFT" >- validateDimension()</TD></TR>
<TR><TD ALIGN="LEFT" >- validatePlayerCount()</TD></TR>
<TR><TD ALIGN="LEFT" >- validateSymbols()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_393823747 { 
   	label=WinningStrategy
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   OrderNWinningStrategy1401796778[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)OrderNWinningStrategy</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ checkWinner(board: Board, move: Move): Player</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

OrderNsquareWinningStrategy1401796778[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)OrderNsquareWinningStrategy</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ checkWinner(board: Board, move: Move): Player</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

OrderOneWinningStrategy1401796778[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)OrderOneWinningStrategy</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   colHashMapList: List&lt;HashMap&lt;Character, Integer&gt;&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   cornersHashMap: HashMap&lt;Character, Integer&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   dimension: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   leftDiagonalHashMap: HashMap&lt;Character, Integer&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   rightDiagonalHashMap: HashMap&lt;Character, Integer&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   rowHashMapList: List&lt;HashMap&lt;Character, Integer&gt;&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- checkCorners(symbol: char): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- checkHashMap(map: HashMap&lt;Character, Integer&gt;, symbol: char): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ checkWinner(board: Board, move: Move): Player</TD></TR>
<TR><TD ALIGN="LEFT" >- isMoveInCorners(row: int, col: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- isMoveOnLeftDiagonal(row: int, col: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- isMoveOnRightDiagonal(row: int, col: int): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

WinningStrategyFactory1401796778[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)WinningStrategyFactory</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ getWinningStrategy(name: WinningStrategyName, dimension: int): WinningStrategy</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_74517257 { 
   	label=Model
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Board74517257[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Board</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   lastMove: Move [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   matrix: List&lt;List&lt;Cell&gt;&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   size: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ deepCopy(board: Board): Board</TD></TR>
<TR><TD ALIGN="LEFT" >+ displayBoard()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Bot74517257[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Bot</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   level: BotDifficultyLevel [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ makeMove(board: Board): Move</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Cell74517257[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Cell</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   cellState: CellState [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   col: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   player: Player [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   row: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ deepCopy(cell: Cell): Cell</TD></TR>
<TR><TD ALIGN="LEFT" >+ displayCell()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Game74517257[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Game</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   boardsStates: List&lt;Board&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   currentBoard: Board [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   gameStatus: GameStatus [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   moves: List&lt;Move&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   numberOfSymbols: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   players: List&lt;Player&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   winningStrategy: WinningStrategy [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ builder(): Builder</TD></TR>
<TR><TD ALIGN="LEFT" >+ checkIsEmpty(): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Move74517257[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Move</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   cell: Cell [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   player: Player [0..1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Player74517257[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Player</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   id: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   name: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   playerType: PlayerType [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   symbol: char [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ makeMove(board: Board): Move</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

'edges    
Board74517257 -> Cell74517257[label="matrix
[0..*]"];
Board74517257 -> Move74517257[label="lastMove
[0..1]"];
Bot74517257 -> BotPlayingStrategyFactory319565549[label="makeMove() -> getBotPlayingStrategy()"];
Bot74517257 -> EasyBotPlayingStrategy319565549[arrowhead=none];
Bot74517257 -> HardBotPlayingStrategy319565549[arrowhead=none];
Bot74517257 -> MediumBotPlayingStrategy319565549[arrowhead=none];
Builder243045417 -> Board74517257[label="currentBoard
[0..1]"];
Builder243045417 -> Player74517257[label="players
[0..*]"];
Cell74517257 -> Player74517257[label="player
[0..1]"];
Game74517257 -> Board74517257[label="boardsStates
[0..*]"];
Game74517257 -> Board74517257[label="currentBoard
[0..1]"];
Game74517257 -> Move74517257[label="moves
[0..*]"];
Game74517257 -> Player74517257[label="players
[0..*]"];
GameController1664073796 -> Cell74517257[label="replayGame() -> displayCell()"];
GameController1664073796 -> Game74517257[label="createGame() -> builder()"];
GameController1664073796 -> OrderNWinningStrategy1401796778[arrowhead=none];
GameController1664073796 -> OrderNsquareWinningStrategy1401796778[arrowhead=none];
GameController1664073796 -> OrderOneWinningStrategy1401796778[arrowhead=none];
GameController1664073796 -> Player74517257[label="executeMove() -> makeMove()"];
GameController1664073796 -> WinningStrategyFactory1401796778[label="createGame() -> getWinningStrategy()"];
Move74517257 -> Cell74517257[label="cell
[0..1]"];
Move74517257 -> Player74517257[label="player
[0..1]"];
Player74517257 -> Bot74517257[arrowhead=none, arrowtail=empty, dir=both];
    
}
@enduml